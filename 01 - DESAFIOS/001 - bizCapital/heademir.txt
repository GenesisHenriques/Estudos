# Bem-vindos ao Auto Trybe Backend

## Contexto

---

Esse projeto foi desenvolvido para uma vaga na empresa [`BizCapital`](https://www.linkedin.com/company/bizcapital/).

A proposta era desenvolver um micro-serviço que aceite requisições RESTFul que tenham por parâmetro o nome
de uma cidade e retorne uma receita baseada na temperatura atual, e tambem, criar uma aplicação WEB para 
interação com o micro-serviço acima.

### Regras

● Se a temperatura estiver acima de 30º C sugira uma salada;
● Se a temperatura estiver entre 20º C e 29º C sugira uma prato com cereais e/ou
carnes;
● Se a temperatura estiver abaixo de 20º C sugira sopas ou/e caldos

---

---

## Como instalar

Pre-requisitos para rodar o projeto: 
- mongoDB
- NPM

Copie o ssh do projeto `git clone git@bitbucket.org:genesishenriques/challengebizcapital-backend.git`
ou o https do projeto `git clone https://GenesisHenriques@bitbucket.org/genesishenriques/challengebizcapital-backend.git`

* Abra um terminal no seu computador e utilize os comandos a baixo na ordem que são apresentados:

  * `git clone git@bitbucket.org:genesishenriques/challengebizcapital-backend.git` para o ssh ou `git clone https://GenesisHenriques@bitbucket.org/genesishenriques/challengebizcapital-backend.git` para o https
  * `cd challengebizcapital-backend`
  * `npm install`
  * `npm start`

  A aplicação está configurada para rodar na porta local 3000. Caso deseje utilizar outra porta utilize o arquivo `.env.example` para trocar para a porta desejada. Após a alteração renomeie o arquivo para `.env`

---

## Modo de utilização

A API consta com 2 rotas: 
* `/` => caso alguém acesse via brower [`GET`]
* `/historic` => Para as demais funcionalidades
  * `/getAllHistory` [`GET`]  Pegar o histórico de pesquisa
  * `/createByCity/:city` [`POST`] Retorna 3 receitas com base na temperatura da cidade
  
---

## Modo de desenvolvimento

---

O projeto foi desenvolvido usando o conceito de middleware e a arquitetura MSC.

### Tecnologias

---

Foi utilizado para o desenvolvimento desse projeto o NodeJS com Express para a criação básica.

---

### Dados

Segue abaixo os atributos de uma cidade utilizados, os tipos de dados de cada um e a forma que foram armazenados no banco:

![cobertura de testes unitários](./src/img/types.jpg)

### Banco de dados

O banco escolhido para a aplicação foi `Mongodb`, pela agilidade no desenvolvimento, facilidade de adição de novas informações sem necessitar re-estruturar toda a estrutura e pela robustes para lidar com grande volume de requisições.
Foi utilizado o `Mongodb` atraves do [`MongoDB Atlas Database`](https://www.mongodb.com/atlas/database).

---

## Cobertura de teste

A atual cobertura de testes é de: 
- `0%` das linhas;

Por conta do tempo foi decidido focar primeiramente nas funcionalidades.

---

## Próximos passos

* Implementação dos testes unitários, e posteriormente os testes de integração.
* Implementação do DELETE na rota de `historic`
* Implementação do GET, PUT, POST e DELETE na rota de `users`
* Implementação do middleware de `auth`

---

## Contatos

<div style="display: flex; align-items: center; justify-content: space-between;">
  <div>
    <h2> Genesis Henriques </h2>
  <div style="display: flex; align-items: center;">
    <img src=".src/api/img/linkedIn_logo.jpg" alt="LinkedIn" style="width:20px;"/>  https://www.linkedin.com/in/genesis-henriques/
  </div>
  <br/>
  <div style="display: flex;align-items: center;">
    <img src=".src/api/img/github_logo.png" alt="LinkedIn" style="width:20px;"/> https://github.com/GenesisHenriques
  </div>
  <br/>
  Email: genesishenriques7@gmail.com
  </div>
    <img src=".src/api/img/genesis.jpeg" alt="LinkedIn" style="width:100px;"/> 
  </div>
<br/>

